// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Collections;
using System.IO;
using System.Threading.Tasks;
using DoAndGet.Models;
using DoAndGet.RequestModels;
using DoAndGet.ResponceModels;
using DoAndGet.ResponceModels.GetActivity;
using DoAndGet.ResponceModels.RewardModel;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace DoAndGet.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace DoAndGet.Interfaces
{
    using DoAndGet.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIWebServices : IWebServices
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIWebServices(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.Login(LoginRequest loginRequest)
        {
            var arguments = new object[] { loginRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("Login", new Type[] { typeof(LoginRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ParentRegistationResponceModel> IWebServices.ParentRegistation(ParentRegistationRequest registationRequest)
        {
            var arguments = new object[] { registationRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("ParentRegistation", new Type[] { typeof(ParentRegistationRequest) });
            return (Task<ParentRegistationResponceModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<GetAllChild> IWebServices.GetAllChild(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllChild", new Type[] { typeof(string) });
            return (Task<GetAllChild>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<GetActivityModel> IWebServices.GetAllActivity(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllActivity", new Type[] { typeof(string) });
            return (Task<GetActivityModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.AddMultipleChild(string token, AddMultipleChildRequest childData)
        {
            var arguments = new object[] { token, childData };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddMultipleChild", new Type[] { typeof(string), typeof(AddMultipleChildRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ParentProfileResponceModel> IWebServices.GetParentProfile(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetParentProfile", new Type[] { typeof(string) });
            return (Task<ParentProfileResponceModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<GetRewardModel> IWebServices.GetAllReward(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllReward", new Type[] { typeof(string) });
            return (Task<GetRewardModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.AddActivity(string token, AddActivityRequest Request)
        {
            var arguments = new object[] { token, Request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddActivity", new Type[] { typeof(string), typeof(AddActivityRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.AddReward(string token, AddRewardRequest Request)
        {
            var arguments = new object[] { token, Request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddReward", new Type[] { typeof(string), typeof(AddRewardRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.AddSingleChild(string token, AddSingleChildRequest Request)
        {
            var arguments = new object[] { token, Request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddSingleChild", new Type[] { typeof(string), typeof(AddSingleChildRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.UpdateActivityStatus(string token, UpdateActivityStatusRequest Request)
        {
            var arguments = new object[] { token, Request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateActivityStatus", new Type[] { typeof(string), typeof(UpdateActivityStatusRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.ChildLogin(ChildLoginRequest Request)
        {
            var arguments = new object[] { Request };
            var func = requestBuilder.BuildRestResultFuncForMethod("ChildLogin", new Type[] { typeof(ChildLoginRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ChildActivityResponceModel> IWebServices.GetAllChildActivity(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllChildActivity", new Type[] { typeof(string) });
            return (Task<ChildActivityResponceModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ChildRewardResponce> IWebServices.GetAllChildReward(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllChildReward", new Type[] { typeof(string) });
            return (Task<ChildRewardResponce>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseBaseObject> IWebServices.UpdateChildActivityStatus(string token, ChildActivityStatusRequest Request)
        {
            var arguments = new object[] { token, Request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateChildActivityStatus", new Type[] { typeof(string), typeof(ChildActivityStatusRequest) });
            return (Task<ResponseBaseObject>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ChildGetProfileResponceModel> IWebServices.GetChildGetProfile(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetChildGetProfile", new Type[] { typeof(string) });
            return (Task<ChildGetProfileResponceModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ChildGetProfileResponceModel> IWebServices.ChildpointRedeem(string token, ChildPointRedeemRequest childPointRedeemRequest)
        {
            var arguments = new object[] { token, childPointRedeemRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("ChildpointRedeem", new Type[] { typeof(string), typeof(ChildPointRedeemRequest) });
            return (Task<ChildGetProfileResponceModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ImageResponce> IWebServices.UploadProfileImage(StreamPart stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadProfileImage", new Type[] { typeof(StreamPart) });
            return (Task<ImageResponce>)func(Client, arguments);
        }
    }
}
